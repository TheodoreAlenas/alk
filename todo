the executables should go to ~/.local/share/alsnip so they can be found

there should be an one size fits all interface, called alsnip,
and alm-snippet should only parse in different formats.

kill me



Alright, now I can see the project with a fresh pair of eyes.

Here are the methods that should be exposed, in order of depth:


Get a piece of functionality from the user.
Get a piece of copyable snippet from the user.
Run a piece of functionality.
Copy a snippet.

Present, `show off' pieces that fit certain criteria.
Show help, given an ID and maybe the agent.
Run some code. Takes:
  should_store, show{temporary, permanent, dont},
  paint_script (optional), script
Copy a piece of text.

List the ID and agent of pieces that fit certain criteria.
Get the description of a piece.
Retrieve what's to be ran, given an ID and maybe the agent.
Retrieve what's to be copied, given an ID and maybe the agent.
Get the text of a description, perhaps with an option to color it.

m1 | volume   | pacmd set-sink-volume 0 21000
m2 | volume   | pacmd set-sink-volume 0 42000
m3 | volume   | pacmd set-sink-volume 0 84000
m4 | volume   | pacmd set-sink-volume 0 21000
m5 | volume   | pacmd set-sink-volume 0 42000
m6 | volume   | pacmd set-sink-volume 0 84000
7  | desktop  | bspc desktop (uh oh)

Okay this isn't a very good example is it.
Things that have some mathematical something might need
to be produced by a program.

Actually if the autocomplete things need to be turned into
separate commands, then we're screwed. Especially if this
means files. The ID would be messed up, perhaps we shouldn't
use an ID then.

