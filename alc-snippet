#!/bin/env sh

# shellcheck disable=SC2016
awk_more_args='
NR > 1 {print $0}  # theres an inevitable newline character there

END {
printf("_asmbc_ARG%d_asmbc_\n", NR);
for (i = NR + 1; i < 10; i++)
  printf("ARG%d\n", i);
}'

# shellcheck disable=SC2016
awk_mark='{
split($0, a, "_asmbc_");
printf("%s", a[1]);
l=length(a)
for (i=2; i <= l; i++)
  printf("\nselection\n%s", a[i]);
printf("\n");
}'

to_tell_the_bar() {
  tltb_script_name="$1" tltb_args_as_lines="$2" tltb_is_key="$3"
  printf "%s\n" "$tltb_args_as_lines" \
    | awk "$awk_more_args" \
    | xargs -d'\n' alm-snippet colored-wrapped "$tltb_script_name" "$tltb_is_key" \
    | awk "$awk_mark"
}

tell_the_bar() {
  to_tell_the_bar "$1" "$2" "$3" | ~/.config/alsnip/user-io say-bar "$4"
}

append_to_the_bar() {
  read -r attb_type
  case "$attb_type" in
    manip) printf "(%s) " "$attb_type"; read -r _; tr '\n' ';' ;;
    preview) printf "(fzf --preview) "; read -r _; tr '\n' ';' ;;
    command | get-image-piped) printf "(%s) " "$attb_type"; tr '\n' ';' ; printf "\n" ;;
    ls | get-image-in) printf "(%s) " "$attb_type"; tr '\n' ' ' ; printf "\n" ;;
    *) printf "%s (%s)" "${0##*/}" "$attb_type" ;;
  esac
}

assemble() {
  asmbc_script_name="$1" asmbc_dump_here="$2" asmbc_dump_colors="$3" asmbc_is_key="$4"

  asmbc_args_as_lines=''

  arg_i=1
  while [ "$arg_i" -lt 10 ]  # safety measure
  do
    arg_recipe="$(alm-snippet print "$asmbc_script_name" "arg$arg_i")"
    test "$arg_recipe" || break

    asmbc_bar_message="$(printf "%s\n" "$arg_recipe" | append_to_the_bar)"
    tell_the_bar "$asmbc_script_name" "$asmbc_args_as_lines" "$asmbc_is_key" "$asmbc_bar_message"

    user_input="$(printf "%s\n" "$arg_recipe" | { read -r t; ~/.config/alsnip/user-io "$t"; })"
    test "$user_input" || {
      tell_the_bar "$asmbc_script_name" "$asmbc_args_as_lines" "$asmbc_is_key" "${0##*/} (aborted)"
      exit 1
    }

    asmbc_args_as_lines="$(printf "%s\n%s" "$asmbc_args_as_lines" "$user_input")"
    arg_i=$((arg_i + 1))
  done

  printf "%s\n" "$asmbc_args_as_lines" \
    | awk 'NR > 1 {print $0}' \
    | xargs -d'\n' alm-snippet print-wrapped "$asmbc_script_name" "$asmbc_is_key" \
    > "$asmbc_dump_here"

  printf "%s\n" "$asmbc_args_as_lines" \
    | awk 'NR > 1 {print $0}' \
    | xargs -d'\n' alm-snippet colored-wrapped "$asmbc_script_name" "$asmbc_is_key" \
    > "$asmbc_dump_colors"
}

get_command_from_user() {
  raw_choice="$(alm-snippet preview "$1" | ~/.config/alsnip/user-io recommend)"
  test "$raw_choice" || return 1
  printf "%s" "$raw_choice" | alm-snippet unpreview
}


assemble_and_execute() {
  assemble "$@" || exit
  ~/.config/alsnip/user-io say-bar "${0##*/} (script assembled)" < "$3"
  ~/.config/alsnip/user-io execute "$(cat "$2")"
}

gui_run() {
  choice="$1" key="$2"
  mkdir -p /tmp/al
  assembled="$(mktemp /tmp/al/completion-of-"$choice"-XXXXX)"
  colored="$(mktemp /tmp/al/colored-completion-of-"$choice"-XXXXX)"
  (assemble_and_execute "$choice" "$assembled" "$colored" "$key")
  rm "$assembled" "$colored"
}

use_gui() {
  choice="$(get_command_from_user "$1")" || exit
  gui_run "$choice" "$1"
}

help() {
  echo "A wrapper for alm-snippet."
  alc-generate-help "$0" help_generator_start_here
}

run() {
  help_generator_start_here="$1"
  case "$help_generator_start_here" in
    --help) help ;;
    gui) use_gui "${2:-key}" ;;  # TAG   A picker will show up. Can specify tag.
    gui-run) gui_run "$2" "${3:-key}" ;;  # COMMAND TAG   Specify command to run
    *) help >&2 ; exit 1 ;;
  esac
}

run "$@"
